{% extends 'SonataAdminBundle:CRUD:action.html.twig' %}

{% block actions %}
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script type="text/javascript">
		var modal_elements = [];
		var cit_info = [];

		function agendaDisabledByHolidays() {
			return 	'<div class="alert alert-block">\
						<h4>Dia Inhabilitado</h4>\
						Dia inhabilitado por las Fiestas, <b>no es posible asignar citas</b>...\
					</div>';
		}

		function agendaMedicaDisabled() {
			return 	'<div class="alert alert-block alert-info">\
						<h4>Dia Inhabilitado</h4>\
						El dia seleccionado es anterior a la fecha actual, motivo por el cual <b>no es posible asignar citas</b>...\
					</div>';
		}

		function agendaMedicaEnabled(parameters) {
			message = "";
			if(cit_info[1][parameters[0].index]['bloqueado'] == "true") {
				message = '<div class="alert alert-info">\
								Algunos horarios de atenci&oacute;n no estan disponibles debido a que han sido bloqueados por el m&eacute;dico...\
						   </div>';
			}
			return message+'Agenda Medica Habilitada';
		}

		function pushModalElement(newId, callFunction, parameters_func) {
			modalElmentFound = 0;
			if(modal_elements.length != 0) {
				for (var i in modal_elements) {
					if (modal_elements[i].id == newId) {
							modalElmentFound = modalElmentFound + 1;
						}
					}
				}
				        
				if(modalElmentFound == 0) {
				    modal_elements.push({
					    id: newId,
					    func: callFunction,
					    header: 'Agenda M&eacute;dica',
					    footer: '',
					    widthModal: 750,
					    parameters: parameters_func
					});	
				}
		}

		function updateMonthIformationCit() {
			var calendarDate = $('#calendar-holder').fullCalendar('getDate');
				calendarDate.setHours(0,0,0,0);

			jQuery.ajax({
			    url: Routing.generate('citasdiaxmedico') + '?idEmpleado={{ app.user.getIdEmpleado().getId() }}&calendarDate='+calendarDate,
			    async: false,
			    dataType: 'json',
			    success: function(data) {
			    	cit_info[0] = data.data1;
			    	cit_info[1] = data.data2;
			    }
            });
		}

		function getIndexOfK(arr, date){
		    for(var i=0; i<arr.length; i++){
		    	var array_date = new Date(arr[i].date+' 00:00:00'); 	// YYYY/MM/DD formato soportado para FF, GC, y IC
		    	if (date.getDate() === array_date.getDate() && date.getMonth() === array_date.getMonth() && date.getFullYear() === array_date.getFullYear()) {
		    		return i;
		    	}
		    }
		    return -1;
		}

		jQuery(document).ready(function($) {
			var date = new Date();
			var d = date.getDate();
			var m = date.getMonth();
			var y = date.getFullYear();
			
			$('#calendar-holder').fullCalendar({
				header: {
					left: 'prev, next,today',
					center: 'title',
					right: 'prevYear, nextYear'
				},
				lazyFetching:true,
	            timeFormat: {
	                    // for agendaWeek and agendaDay
	                    agenda: 'h:mmt', // 5:00 - 6:30

	                    // for all other views
	                    '': 'h:mmt'            // 7p
	            },
	            buttonText: {
			        prev: '&#x25C0; Mes Anterior',
			        next: 'Mes Siguiente &#x25B6;',
			        prevYear: '&#x2770; A&ntilde;o Anterior',
			        nextYear: 'A&ntilde;o Siguiente &#x2771;',
			        today: 'Hoy'
			    },
			    dayRender: function(date, cell) {
			    	var today = new Date();
			    	date.setHours(0,0,0,0);
			    	today.setHours(0,0,0,0);
			    	var calendarDate = $('#calendar-holder').fullCalendar('getDate');
			    	var lowerLimit = new Date(calendarDate.getFullYear(), calendarDate.getMonth(), 1);
			    	var upperLimit = new Date(calendarDate.getFullYear(), calendarDate.getMonth()+1, 0);
			    	var cell_date  = date.getFullYear()+ '-' + (date.getMonth() < 10 ? '0' + date.getMonth()+1 : '' + date.getMonth()+1) + '-' + (date.getDate()  < 10 ? '0' + date.getDate()  : '' + date.getDate());
			    	var primera_vez;
			    	var subsecuentes;
			    	var agregados;
			    	var total_citas;
			    	var atendidos;
			    	var index;

			    	if(cit_info != false && date >= lowerLimit && date <= upperLimit) {
			    		index = getIndexOfK(cit_info[0], date);
			    		if(index > -1) {
			    			total_citas  = cit_info[0][index].total_citas;
							atendidos    = cit_info[0][index].atendidos;
							primera_vez  = cit_info[0][index].primera_vez;
							subsecuentes = cit_info[0][index].subsecuentes;
						    agregados    = cit_info[0][index].agregados;

				    		if (cit_info[1][index]['bloqueado'] == 'true') {
				    			if(cit_info[1][index]['tipo_evento'] == 'festivo') {
				    				cell.css("background-color", "#FFF1E1");
				    				createCellContent(3, cell, [{'cell_date': cell_date, 'index': index}]);
				    			}
				    		}

				    		if(date >= lowerLimit && date < today) {
							 	
							 	if (cit_info[1][index]['tipo_evento'] != 'festivo') {
							    	cell.css("background-color", "#E8F2FF");
							    	createCellContent(1, cell, [{
							    			'total_citas':  total_citas, 
							    			'atendidos':    atendidos, 
							    			'cell_date':    cell_date, 
							    			'calendarDate': calendarDate, 
							    			'date':         date, 
							    			'today': 		today,
							    			'index': 		index 
							    		}]
							    	);
							    }
						    }

						    if (date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()) {

						    	cell.css("background-color", "#FEFFDB");

						    	if(cit_info[1][index]['tipo_evento'] != 'festivo') {
						    		createCellContent(2, cell, [{
					    					'primera_vez':  primera_vez, 
					    					'subsecuentes': subsecuentes, 
					    					'total_citas':  total_citas, 
					    					'agregados': 	agregados, 
					    					'cell_date': 	cell_date, 
					    					'calendarDate': calendarDate, 
					    					'date': 		date, 
					    					'today': 		today,
					    					'index': 		index
					    				}]
					    			);
						    	}
				    		}

				    		if(date > today && date >= lowerLimit && date <= upperLimit) {

				    			if(cit_info[1][index]['tipo_evento'] != 'festivo') {
				    				cell.css("background-color", "#DCFCE9");
					    			createCellContent(2, cell, [{
					    					'primera_vez': 	primera_vez, 
					    					'subsecuentes': subsecuentes, 
					    					'total_citas': 	total_citas, 
					    					'agregados': 	agregados, 
					    					'cell_date': 	cell_date, 
					    					'calendarDate': calendarDate, 
					    					'date': 		date, 
					    					'today': 		today,
					    					'index': 		index
					    				}]
					    			);
					    		}
				    		}
				    	}
			    	}

				    if(cell.find("div.fc-custom-content-tb").length == 0) {
				    	cell.append('<div class="fc-custom-content-tb"></div>');
				    }
			    },
			    monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
			    monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
			    dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sabado'],
			    hiddenDays: [ 0, 6 ],
			    dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sab'],
				eventSources: [
	                    {
	                        url: Routing.generate('fullcalendar_loader'), 
							type: 'POST',
							// A way to add custom filters to your event listeners
							data: {

	                        },
	                        error: function() {
	                           //alert('There was an error while fetching Google Calendar!');
	                        }
	                    }
				]
			});

			function createCellContent(type, cell, parameters) {
				switch(type) {
					case 1:
						cell.append('<a href="#myModal" id="citDay-'+parameters[0].cell_date+'_modal" custom-modal="true" role="button" data-toggle="modal">\
								<div class="fc-custom-content-tb">\
									<div class="fc-custom-content">\
										<div class="fc-cuscont-left fc-cuscont-disabled fc-cuscont-border">Citados:</div>\
										<div class="fc-cuscont-right fc-cuscont-disabled fc-cuscont-border">'+ parameters[0].total_citas+'</div>\
										<div class="fc-cuscont-left fc-cuscont-disabled fc-cuscont-border">Atendidos:</div>\
										<div class="fc-cuscont-right fc-cuscont-disabled fc-cuscont-border">'+ parameters[0].atendidos +'</div>\
									</div>\
								</div>\
							</a>');

						pushModalElement('citDay-'+parameters[0].cell_date+'_modal','agendaMedicaDisabled');
					break;
					case 2:
						cell.append('<a href="#myModal" id="citDay-'+parameters[0].cell_date+'_modal" custom-modal="true" role="button" data-toggle="modal">\
							    <div class="fc-custom-content-tb">\
								    <div class="fc-custom-content">\
									    <div class="fc-cuscont-left fc-cuscont-enabled">1er vez:</div>\
									    <div class="fc-cuscont-right fc-cuscont-enabled">'+ parameters[0].primera_vez +'</div>\
									    <div class="fc-cuscont-left fc-cuscont-enabled">Subsecuentes:</div>\
									    <div class="fc-cuscont-right fc-cuscont-enabled">'+ parameters[0].subsecuentes +'</div>\
									    <div class="fc-cuscont-left fc-cuscont-enabled fc-cuscont-border">Agregados:</div>\
									    <div class="fc-cuscont-right fc-cuscont-enabled fc-cuscont-border">'+ parameters[0].agregados +'</div>\
									    <div class="fc-cuscont-left fc-cuscont-enabled">Total Citados:</div>\
									    <div class="fc-cuscont-right fc-cuscont-enabled">'+ parameters[0].total_citas +'</div>\
						    		</div>\
								</div>\
							</a>');
								
							pushModalElement('citDay-'+parameters[0].cell_date+'_modal','agendaMedicaEnabled', [{ 'index': parameters[0].index }]);
					break;
					case 3:
						cell.append('<a href="#myModal" id="citDay-'+parameters[0].cell_date+'_modal" custom-modal="true" role="button" data-toggle="modal">\
								<div class="fc-custom-content-tb">\
									<div class="fc-custom-content">\
										<div class="festive-day">DIA FESTIVO</div>\
									</div>\
								</div>\
							</a>');
						pushModalElement('citDay-'+parameters[0].cell_date+'_modal','agendaDisabledByHolidays');
					break;
				}
			}
		});
	</script>
	<script type="text/javascript">
		// On load
		jQuery(document).ready(function($) {
			// initialize calendar first
			updateMonthIformationCit();
			updateCalendar();

			//removiendo css
			$('#calendar-holder .fc-week .fc-day.fc-first div:first-child').css('min-height','');

			// Update the calendar when previous button is pressed
			$('#calendar-holder .fc-button-prev').on('click', function(){
				updateMonthIformationCit();
				updateCalendar();
			});
			
			// Update the calendar when next button is pressed
			$('#calendar-holder .fc-button-next').on('click', function(){
				updateMonthIformationCit();
				updateCalendar();
			});

			// Update the calendar when the today button is pressed
			$('#calendar-holder .fc-button-today').on('click', function(){
				updateMonthIformationCit();
				updateCalendar();
			});

			$('#calendar-holder .fc-button-prevYear').on('click', function(){
				updateMonthIformationCit();
				updateCalendar();
			});
			
			// Update the calendar when next button is pressed
			$('#calendar-holder .fc-button-nextYear').on('click', function(){
				updateMonthIformationCit();
				updateCalendar();
			});

			
			function updateCalendar() {
				renderCalendar();
				var calendarDate = $('#calendar-holder').fullCalendar('getDate');
				calendarDate.setHours(0,0,0,0);

				var currentDate = new Date();
				currentDate.setHours(0,0,0,0);

				// Disable prev button for the past
				if (currentDate.getFullYear() == calendarDate.getFullYear() && currentDate.getMonth() == calendarDate.getMonth()) {
					disablePrevMonthButton();
				} else {
					enablePrevMonthButton();
				}			
				
				// Disable next button for 2 years from today
				if (currentDate.getFullYear() + 2 == calendarDate.getFullYear() && currentDate.getMonth() == calendarDate.getMonth()) {
					disableNextMonthButton();
				} else {
					enableNextMonthButton();
				}

				var limit = new Date(currentDate.getFullYear() + 1, currentDate.getMonth(), currentDate.getDate());
				if (currentDate.getFullYear() == calendarDate.getFullYear() && currentDate.getMonth() == calendarDate.getMonth()) {
					disablePrevYearButton();
					enableNextYearButton();
				} else if (currentDate.getFullYear() +1 == calendarDate.getFullYear() && currentDate.getMonth() == calendarDate.getMonth()) {
					enablePrevYearButton();
					enableNextYearButton();
				} else if(calendarDate < limit) {
						disablePrevYearButton();
						enableNextYearButton();
					} else {
						disableNextYearButton();
						enablePrevYearButton();
					}
			}

			function enablePrevMonthButton() {
				$("#calendar-holder .fc-button-prev").removeClass('fc-state-disabled');
			}

			function disablePrevMonthButton() {
				$("#calendar-holder .fc-button-prev").addClass('fc-state-disabled');
			}

			function enableNextMonthButton() {
				$("#calendar-holder .fc-button-next").removeClass('fc-state-disabled');
			}

			function disableNextMonthButton() {
				$("#calendar-holder .fc-button-next").addClass('fc-state-disabled');
			}
			
			function enablePrevYearButton() {
				$("#calendar-holder .fc-button-prevYear").removeClass('fc-state-disabled');
			}
			
			function disablePrevYearButton() {
				$("#calendar-holder .fc-button-prevYear").addClass('fc-state-disabled');
			}

			function enableNextYearButton() {
				$("#calendar-holder .fc-button-nextYear").removeClass('fc-state-disabled');
			}
			
			function disableNextYearButton() {
				$("#calendar-holder .fc-button-nextYear").addClass('fc-state-disabled');
			}

			$(window).on('resize', function() {
				renderCalendar();
			});

			function renderCalendar () {
				$('#calendar-holder').fullCalendar('render');
			    $('#calendar-holder .fc-week .fc-day.fc-first div:first-child').css('min-height','');
			    $('#calendar-holder .fc-week .fc-day.fc-first div.fc-custom-content-tb').css('min-height','');
			}
		});
	</script>
{% endblock %}

{% block content %}
	{% include 'ADesignsCalendarBundle::calendar.html.twig' %}
{% endblock %}